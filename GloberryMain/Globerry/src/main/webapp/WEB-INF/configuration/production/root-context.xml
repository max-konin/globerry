<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
        xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- Включаем опцию использования конфигурационных аннотаций (@Annotation-based 
		configuration) <context:component-scan base-package="net.schastny.contactmanager.dao" 
		/> <context:component-scan base-package="net.schastny.contactmanager.service" 
		/> -->
	<context:annotation-config />
	<context:component-scan base-package="com.globerry.project.domain"/>
	<context:component-scan base-package="com.globerry.project.dao"/>
	<context:component-scan base-package="com.globerry.project.service"/>
	<context:component-scan base-package="com.globerry.project.controllers"/>
	
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="ru_RU" />
	</bean>

<!--	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver">

		<property name="cookieName" value="clientlanguage" />

		 in seconds. If set to -1, the cookie is not persisted (deleted when 
			browser shuts down) 
		<property name="cookieMaxAge" value="100000" />

	</bean>       -->
       <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
         <property name="paramName" value="ln" />
        </bean>
        
        <bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" >
       <property name="interceptors">
             <list>
                  <ref bean="localeChangeInterceptor" />
             </list>
       </property>
        </bean>


	<!-- Менеджер транзакций -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- Для загрузки файла! -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="1000000" />
	</bean>
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- <property name="basename" value="classpath:messages" /> -->
		<property name="basenames">
			<list>
				<value>classpath:messages/messages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- Настройки бина dataSource будем хранить в отдельном файле -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="classpath:configuration/production/jdbc.properties" />

	<!-- Непосредственно бин dataSource -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.databaseurl}"
		p:username="${jdbc.username}"
		p:password="${jdbc.password}" />

	<!-- Настройки фабрики сессий Хибернейта -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		p:packagesToScan="com.globerry.project.Dao">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:configuration/production/hibernate.cfg.xml</value>
		</property>
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		<property name="hibernateProperties">
			<props>				
				<prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.connection.charSet">UTF-8</prop>
			</props>
		</property>
	</bean>

        
        
         <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
            <constructor-arg name="mongo" ref="mongo"/>
            <constructor-arg name="databaseName" value="globerry"/>
        </bean>
 
        <!-- Factory bean that creates the Mongo instance -->
        <bean id="mongo" class="org.springframework.data.mongodb.core.MongoFactoryBean">
            <property name="host" value="localhost"/>
        </bean>
 
        <!-- Use this post processor to translate any MongoExceptions thrown in @Repository annotated classes -->
        <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
        
        
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="config" class="com.globerry.project.service.service_classes.JedisPoolWrapper">
		<!-- Action to take when trying to acquire a connection and all connections are taken -->
		<property name="whenExhaustedAction">
			<!-- Fail-fast behaviour, we don't like to keep the kids waiting -->
			<util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_FAIL" />
		<!-- Default behaviour, block the caller until a resource becomes available -->
		<!--<util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_BLOCK" />-->
		</property>
		<!-- Maximum active connections to Redis instance -->
		<property name="maxActive" value="10" />
		<!-- Number of connections to Redis that just sit there and do nothing -->
		<property name="maxIdle" value="5" />
		<!-- Minimum number of idle connections to Redis - these can be seen as always open and ready to serve -->
		<property name="minIdle" value="1" />
		<!-- Tests whether connection is dead when connection retrieval method is called -->
		<property name="testOnBorrow" value="true" />
		<!-- Tests whether connection is dead when returning a connection to the pool -->
		<property name="testOnReturn" value="true" />
		<!-- Tests whether connections are dead during idle periods -->
		<property name="testWhileIdle" value="true" />
		<!-- Maximum number of connections to test in each idle check -->
		<property name="numTestsPerEvictionRun" value="10" />
		<!-- Idle connection checking period -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- Maximum time, in milliseconds, to wait for a resource when exausted action is set to WHEN_EXAUSTED_BLOCK -->
		<property name="maxWait" value="3000" />
	</bean>
	
	<bean id="redisConnectionPool" class="redis.clients.jedis.JedisPool"
			 destroy-method="destroy">
		<!-- config -->
		<constructor-arg index="0">
			<bean factory-bean="config" factory-method="getConfig" />
		</constructor-arg>
		<!-- host -->
		<constructor-arg index="1" value="localhost" />
		<!-- port -->
		<constructor-arg index="2" value="6379" />
		<!-- timeout -->
		<constructor-arg index="3" value="500" />
		<!-- password -->
		<constructor-arg index="4" value="redisDBase" />
	</bean>	
	
	
	<!--<bean id="appConfigConstants" class="com.globerry.project.service.service_classes.AppConfigConstants">
	</bean>-->
	
	<!-- redis conection factory -->
	<!--<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<constructor-arg>
			<bean factory-bean="config" factory-method="getConfig" />
		</constructor-arg>
		<property name="hostName" value="localhost" />
		<property name="password" value="redisDBase" />
		<property name="port" value="6379" />
	</bean>-->

	<!-- redis template -->
	<!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"/>
	</bean>-->

	
	<import resource="security.xml" />
</beans>
